CP(1)                   FreeBSD General Commands Manual                  CP(1)

NNAAMMEE
     ccpp - copy files

SSYYNNOOPPSSIISS
     ccpp [--RR [--HH | --LL | --PP]] [--ff | --ii | --nn] [--aallppssvvxx] _s_o_u_r_c_e___f_i_l_e _t_a_r_g_e_t___f_i_l_e
     ccpp [--RR [--HH | --LL | --PP]] [--ff | --ii | --nn] [--aallppssvvxx]
        _s_o_u_r_c_e___f_i_l_e _._._. _t_a_r_g_e_t___d_i_r_e_c_t_o_r_y

DDEESSCCRRIIPPTTIIOONN
     In the first synopsis form, the ccpp utility copies the contents of the
     _s_o_u_r_c_e___f_i_l_e to the _t_a_r_g_e_t___f_i_l_e.  In the second synopsis form, the
     contents of each named _s_o_u_r_c_e___f_i_l_e is copied to the destination
     _t_a_r_g_e_t___d_i_r_e_c_t_o_r_y.  The names of the files themselves are not changed.  If
     ccpp detects an attempt to copy a file to itself, the copy will fail.

     The following options are available:

     --HH    If the --RR option is specified, symbolic links on the command line
           are followed.  (Symbolic links encountered in the tree traversal
           are not followed.)

     --LL    If the --RR option is specified, all symbolic links are followed.

     --PP    If the --RR option is specified, no symbolic links are followed.
           This is the default.

     --RR    If _s_o_u_r_c_e___f_i_l_e designates a directory, ccpp copies the directory and
           the entire subtree connected at that point.  If the _s_o_u_r_c_e___f_i_l_e
           ends in a _/, the contents of the directory are copied rather than
           the directory itself.  This option also causes symbolic links to be
           copied, rather than indirected through, and for ccpp to create
           special files rather than copying them as normal files.  Created
           directories have the same mode as the corresponding source
           directory, unmodified by the process' umask.

           Note that ccpp copies hard linked files as separate files.  If you
           need to preserve hard links, consider using tar(1), cpio(1), or
           pax(1) instead.

     --aa    Archive mode.  Same as --RRppPP.

     --ff    For each existing destination pathname, remove it and create a new
           file, without prompting for confirmation regardless of its
           permissions.  (The --ff option overrides any previous --ii or --nn
           options.)

     --ii    Cause ccpp to write a prompt to the standard error output before
           copying a file that would overwrite an existing file.  If the
           response from the standard input begins with the character `y' or
           `Y', the file copy is attempted.  (The --ii option overrides any
           previous --ff or --nn options.)

     --ll    Create hard links to regular files in a hierarchy instead of
           copying.

     --nn    Do not overwrite an existing file.  (The --nn option overrides any
           previous --ff or --ii options.)

     --pp    Cause ccpp to preserve the following attributes of each source file
           in the copy: modification time, access time, file flags, file mode,
           ACL, user ID, and group ID, as allowed by permissions.

           If the user ID and group ID cannot be preserved, no error message
           is displayed and the exit value is not altered.

           If the source file has its set-user-ID bit on and the user ID
           cannot be preserved, the set-user-ID bit is not preserved in the
           copy's permissions.  If the source file has its set-group-ID bit on
           and the group ID cannot be preserved, the set-group-ID bit is not
           preserved in the copy's permissions.  If the source file has both
           its set-user-ID and set-group-ID bits on, and either the user ID or
           group ID cannot be preserved, neither the set-user-ID nor set-
           group-ID bits are preserved in the copy's permissions.

     --ss    Create symbolic links to regular files in a hierarchy instead of
           copying.

     --vv    Cause ccpp to be verbose, showing files as they are copied.

     --xx    File system mount points are not traversed.

     For each destination file that already exists, its contents are
     overwritten if permissions allow.  Its mode, user ID, and group ID are
     unchanged unless the --pp option was specified.

     In the second synopsis form, _t_a_r_g_e_t___d_i_r_e_c_t_o_r_y must exist unless there is
     only one named _s_o_u_r_c_e___f_i_l_e which is a directory and the --RR flag is
     specified.

     If the destination file does not exist, the mode of the source file is
     used as modified by the file mode creation mask (uummaasskk, see csh(1)).  If
     the source file has its set-user-ID bit on, that bit is removed unless
     both the source file and the destination file are owned by the same user.
     If the source file has its set-group-ID bit on, that bit is removed
     unless both the source file and the destination file are in the same
     group and the user is a member of that group.  If both the set-user-ID
     and set-group-ID bits are set, all of the above conditions must be
     fulfilled or both bits are removed.

     Appropriate permissions are required for file creation or overwriting.

     Symbolic links are always followed unless the --RR flag is set, in which
     case symbolic links are not followed, by default.  The --HH or --LL flags (in
     conjunction with the --RR flag) cause symbolic links to be followed as
     described above.  The --HH, --LL and --PP options are ignored unless the --RR
     option is specified.  In addition, these options override each other and
     the command's actions are determined by the last one specified.

     If ccpp receives a SIGINFO (see the ssttaattuuss argument for stty(1)) signal,
     the current input and output file and the percentage complete will be
     written to the standard output.

EEXXIITT SSTTAATTUUSS
     The ccpp utility exits 0 on success, and >0 if an error occurs.

EEXXAAMMPPLLEESS
     Make a copy of file _f_o_o named _b_a_r:

           $ cp foo bar

     Copy a group of files to the _/_t_m_p directory:

           $ cp *.txt /tmp

     Copy the directory _j_u_n_k and all of its contents (including any
     subdirectories) to the _/_t_m_p directory:

           $ cp -R junk /tmp

CCOOMMPPAATTIIBBIILLIITTYY
     Historic versions of the ccpp utility had a --rr option.  This implementation
     supports that option, however, its behavior is different from historical
     FreeBSD behavior.  Use of this option is strongly discouraged as the
     behavior is implementation-dependent.  In FreeBSD, --rr is a synonym for
     --RRLL and works the same unless modified by other flags.  Historical
     implementations of --rr differ as they copy special files as normal files
     while recreating a hierarchy.

     The --ll,, --ss,, --vv,, --xx and --nn options are non-standard and their use in
     scripts is not recommended.

SSEEEE AALLSSOO
     mv(1), rcp(1), umask(2), fts(3), symlink(7)

SSTTAANNDDAARRDDSS
     The ccpp command is expected to be IEEE Std 1003.2 (``POSIX.2'')
     compatible.

HHIISSTTOORRYY
     A ccpp command appeared in Version 1 AT&T UNIX.

FreeBSD 11.1-RELEASE             June 6, 2015             FreeBSD 11.1-RELEASE
